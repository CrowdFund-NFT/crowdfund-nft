type UserId__1 = principal;
type UserId = principal;
type ProjectId = text;
type Project = 
 record {
   category: text;
   coverImg: Image;
   description: text;
   discordLink: Link;
   goal: float64;
   id: ProjectId;
   nftVolume: nat;
   owner: UserId;
   story: text;
   tags: vec text;
   title: text;
   twitterLink: Link;
   walletId: text;
   wetransferLink: Link;
 };
type Profile = 
 record {
   bio: text;
   firstName: text;
   id: UserId;
   img: Image;
   lastName: text;
 };
type NewProject = 
 record {
   category: text;
   coverImg: Image;
   description: text;
   discordLink: Link;
   goal: float64;
   nftVolume: nat;
   story: text;
   tags: vec text;
   title: text;
   twitterLink: Link;
   walletId: text;
   wetransferLink: Link;
 };
type NewProfile = 
 record {
   bio: text;
   firstName: text;
   img: Image;
   lastName: text;
 };
type Link = text;
type Image = vec nat8;
service : {
  createFirstProject: (NewProfile, NewProject) -> (Project);
  createProfile: (NewProfile) -> ();
  createProject: (NewProject) -> (Project);
  getMyProfile: () -> (Profile) query;
  getMyProjects: () -> (vec Project) query;
  getOwnId: () -> (UserId__1) query;
  getOwnIdText: () -> (text) query;
  getProfile: (UserId__1) -> (Profile) query;
  getProjects: (UserId__1) -> (vec Project) query;
  greet: () -> (text);
  healthcheck: () -> (bool);
  listProjects: () -> (vec Project) query;
  searchProfiles: (text) -> (vec Profile) query;
  updateProfile: (Profile) -> ();
}
